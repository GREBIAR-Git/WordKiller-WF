using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MakeReportWord
{
    class EncodingDecoding
    {
        public static char DigitToLetter(char digit)
        {
            string abc = "abcdefghij";
            return abc[int.Parse(digit.ToString())];
        }

        public static char LetterToDigit(char letter)
        {
            if (letter != '\r'&&letter!='\n')
            {
                return int.Parse(((char)(letter - 49)).ToString()).ToString()[0];
            }
            return letter;
        }

        public static string DigitsToAbc(string digits)
        {
            string abc = "";
            for (int i = 0; i < digits.Length; i++)
            {
                abc += DigitToLetter(digits[i]);
            }
            return abc;
        }

        public static string AbcToDigits(string abc)
        {
            string digits = "";
            for (int i = 0; i < abc.Length; i++)
            {
                digits+= LetterToDigit(abc[i]);
            }
            return digits;
        }

        public static string StringToBinaryString(string str)
        {
            string hexStr = BitConverter.ToString(Encoding.Unicode.GetBytes(str));
            hexStr = hexStr.Replace("-", "");
            string binarystring = String.Join(String.Empty, hexStr.Select(c => Convert.ToString(Convert.ToInt32(c.ToString(), 16), 2).PadLeft(4, '0')));
            return binarystring;
        }


        public static string BinaryStringToString(string str)
        {
            string normalStr = "";



            return normalStr;
        }

        public static string RepeatEncodingBinary(string binarystring)
        {
            string encoded = "";
            int digit = 0;
            while (digit < binarystring.Length)
            {
                int counter = 0;
                for (; counter < 9; counter++)
                {
                    if (!(digit + counter + 1 < binarystring.Length && binarystring[digit + counter + 1] == binarystring[digit]))
                    {
                        break;
                    }
                }
                encoded += (counter + 1).ToString() + binarystring[digit].ToString();
                digit += counter + 1;
            }
            return encoded;
        }

        public static string RepeatDecodingBinary(string repeated_digit)
        {
            string decoded = "";
            for (int index = 0; index + 1 < repeated_digit.Length; index+=2)
            {
                string digit = repeated_digit[index].ToString();
                if (digit != "\r" && digit != "\n")
                {
                    string f = repeated_digit[index].ToString();
                    for (int i = 0; i < int.Parse(repeated_digit[index].ToString()); i++)
                    {
                        decoded += repeated_digit[index + 1];
                    }
                }
                else
                {
                    string digit2 = repeated_digit[index + 1].ToString();
                    if (digit2 == "\r" || digit2 == "\n")
                    {
                        decoded += digit+ digit2;
                    }
                }
            }
            return decoded;
        }
    }
}
//"001110100010011001001101000000000110010100000000011011101111110100010011001001104931100110100000000011001010000000001101110119229110110010100000000011011010491110111001011921821110000100000000011000110000000001110101000000000110110110111100100000000010000110000000001101111000000000110110100000000011000101941110111100000000011110132384153374631010000111100000001000011000000000100010001100000010000111000000001000011111000000100001111010000010000111101000001000100101100000100010001010000010000105548355346411547410000011100000000100001036483373101000011111000000100001100100000010001001011000001000100010100000100001046411533154154641546425484252\n1111101010000000001101101000000000110001021921101010219100111010411101111000000000111101321\n110110102191192191110110010100000000011110110100001019100011101000100110\r011001012929391291000110110129111100101000000000101010219100111010411101111000000000111101321\n100011100101921110010100000000011100110000000001110011000000000110111100000000011100104919119311101111000000000100001019100011101000100110\r011110010000000001100101000000000110000100000000011100101110110010100000000011110110100001019100011101000100110001100101000011001000000000\r01110011000000000110101292111100101110110010100000000011110110100001019100011101000100110\r01110011000000000111010119210110010100000000011011101101110011000000000101010219100111010411101111000000000111101321\n13221110110010100000000011110110101001100000000011101049211110101321\n2921110101111001102931000101029210001010292100010102921000101010000000101021110111011110011100000000011001102929211100111000000000110011011110011100000000011001102929\n1322111011001010000000001111011010001010000000001101110210011101000100110"
//"001110100010011001001101000000000110010100000000011011101111110100010011001001104931100110100000000011001010000000001101110119229110110010100000000011011010491110111001011921821110000100000000011000110000000001110101000000000110110110111100100000000010000110000000001101111000000000110110100000000011000101941110111100000000011110132384153374631010000111100000001000011000000000100010001100000010000111000000001000011111000000100001111010000010000111101000001000100101100000100010001010000010000105548355346411547410000011100000000100001036483373101000011111000000100001100100000010001001011000001000100010100000100001046411533154154641546425484252\n11111101010000000001101101000000000110001021921101010219100111010411101111000000000111101321\n1110110102191192191110110010100000000011110110100001019100011101000100110\r\n011001012929391291000110110129111100101000000000101010219100111010411101111000000000111101321\n1100011100101921110010100000000011100110000000001110011000000000110111100000000011100104919119311101111000000000100001019100011101000100110\r\n011110010000000001100101000000000110000100000000011100101110110010100000000011110110100001019100011101000100110001100101000011001000000000\r\n01110011000000000110101292111100101110110010100000000011110110100001019100011101000100110\r\n01110011000000000111010119210110010100000000011011101101110011000000000101010219100111010411101111000000000111101321\n213221110110010100000000011110110101001100000000011101049211110101321\n12921110101111001102931000101029210001010292100010102921000101010000000101021110111011110011100000000011001102929211100111000000000110011011110011100000000011001102929\n21322111011001010000000001111011010001010000000001101110210011101000100110\r\n"

//"0011101000100110010011010000000001100101000000000110111011111101000100110010011049311001101000000000110010100000000011011101192291101100101000000000110110104911101110010119218211100001000000000110001100000000011101010000000001101101101111001000000000100001100000000011011110000000001101101000000000110001019411101111000000000111101323841533746310100001111000000010000110000000001000100011000000100001110000000010000111110000001000011110100000100001111010000010001001011000001000100010100000100001055483553464115474100000111000000001000010364833731010000111110000001000011001000000100010010110000010001000101000001000010464115331541546415464254842521111101010000000001101101000000000110001021921101010219100111010411101111000000000111101321110110102191192191110110010100000000011110110100001019100011101000100110\r\n011001012929391291000110110129111100101000000000101010219100111010411101111000000000111101321100011100101921110010100000000011100110000000001110011000000000110111100000000011100104919119311101111000000000100001019100011101000100110\r\n011110010000000001100101000000000110000100000000011100101110110010100000000011110110100001019100011101000100110001100101000011001000000000\r\n01110011000000000110101292111100101110110010100000000011110110100001019100011101000100110\r\n011100110000000001110101192101100101000000000110111011011100110000000001010102191001110104111011110000000001111013211322111011001010000000001111011010100110000000001110104921111010132129211101011110011029310001010292100010102921000101029210001010100000001010211101110111100111000000000110011029292111001110000000001100110111100111000000000110011029291322111011001010000000001111011010001010000000001101110210011101000100110\r\n"